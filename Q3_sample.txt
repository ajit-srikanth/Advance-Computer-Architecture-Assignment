┏[ ajit from  MSI][ 0.041s][ RAM: 1/8GB][ Wednesday at 7:39:07 PM] [ base 3.10.13 ]
┖[~/vect_test]
└─Δ gcc q3.c -o q3.out
┏[ ajit from  MSI][ 0.194s][ RAM: 1/8GB][ Wednesday at 7:40:53 PM] [ base 3.10.13 ]
┖[~/vect_test]
└─Δ sudo valgrind --tool=cachegrind --I1=32768,512,64 --L2=1048576,16384,64 ./q3.out
==9577== Cachegrind, a cache and branch-prediction profiler
==9577== Copyright (C) 2002-2017, and GNU GPL'd, by Nicholas Nethercote et al.
==9577== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==9577== Command: ./q3.out
==9577==
--9577-- warning: L3 cache found, using its data for the LL simulation.
--9577-- warning: specified LL cache: line_size 64  assoc 16  total_size 12,582,912
--9577-- warning: simulated LL cache: line_size 64  assoc 24  total_size 12,582,912
==9577==
==9577== I   refs:      2,062,238,298
==9577== I1  misses:            1,009
==9577== LLi misses:            1,001
==9577== I1  miss rate:          0.00%
==9577== LLi miss rate:          0.00%
==9577==
==9577== D   refs:        832,085,800  (688,025,146 rd   + 144,060,654 wr)
==9577== D1  misses:        2,065,751  (  1,064,099 rd   +   1,001,652 wr)
==9577== LLd misses:        2,006,828  (  1,005,251 rd   +   1,001,577 wr)
==9577== D1  miss rate:           0.2% (        0.2%     +         0.7%  )
==9577== LLd miss rate:           0.2% (        0.1%     +         0.7%  )
==9577==
==9577== LL refs:           2,066,760  (  1,065,108 rd   +   1,001,652 wr)
==9577== LL misses:         2,007,829  (  1,006,252 rd   +   1,001,577 wr)
==9577== LL miss rate:            0.1% (        0.0%     +         0.7%  )
┏┏[ ajit from  MSI][ 1.873s][ RAM: 1/8GB][ Wednesday at 7:39:25 PM] [ base 3.10.13 ]
┖[~/vect_test]
└─Δ sudo cg_annotate cachegrind.out.12370 /home/ajit/vect_test/q3.c
--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 512-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         1048576 B, 64 B, 16384-way associative
Command:          ./q3.out
Data file:        cachegrind.out.12370
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:
User annotated:   /home/ajit/vect_test/q3.c
Auto-annotation:  off

--------------------------------------------------------------------------------
Ir            I1mr  ILmr  Dr          D1mr      DLmr      Dw          D1mw      DLmw
--------------------------------------------------------------------------------
2,062,238,298 1,009 1,001 688,025,146 1,064,099 1,005,251 144,060,654 1,001,652 1,001,577  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir            I1mr ILmr Dr          D1mr      DLmr      Dw         D1mw      DLmw       file:function
--------------------------------------------------------------------------------
1,071,772,128   11   11 383,888,043 1,061,550 1,003,143 48,016,014 1,001,002 1,000,978  /home/ajit/vect_test/q3.c:main
  510,062,968    3    3 128,032,000         3         0 48,012,000         0         0  /build/glibc-SzIz7B/glibc-2.31/stdlib/random_r.c:random_r
  336,084,000    2    2 128,032,000         1         0 32,008,000         1         0  /build/glibc-SzIz7B/glibc-2.31/stdlib/random.c:random
   80,020,000    1    1  16,004,000         0         0 16,004,000         0         0  /build/glibc-SzIz7B/glibc-2.31/stdlib/rand.c:rand
   32,016,227   22   21  16,008,085        10         4         15         1         1  ???:???
   32,008,000    0    0  16,004,000         1         0          0         0         0  /build/glibc-SzIz7B/glibc-2.31/stdlib/../sysdeps/unix/sysv/linux/x86/lowlevellock.h:random

--------------------------------------------------------------------------------
-- User-annotated source: /home/ajit/vect_test/q3.c
--------------------------------------------------------------------------------
Ir          I1mr ILmr Dr          D1mr      DLmr      Dw         D1mw      DLmw

          .    .    .           .         .         .          .         .       .  # include<stdlib.h>
          .    .    .           .         .         .          .         .       .  # include<stdio.h>
          .    .    .           .         .         .          .         .       .  # include<time.h>
          .    .    .           .         .         .          .         .       .  # include <sys/mman.h>
          .    .    .           .         .         .          .         .       .
          .    .    .           .         .         .          .         .       .
          5    0    0           0         0         0          2         0       0  int main(){
          1    0    0           0         0         0          1         0       0      int i, j , n = 4000;
          4    0    0           0         0         0          2         0       0      srand(time(0));
          6    1    1           1         0         0          2         1       0      float *A = (float *)malloc(n * sizeof(float));
          6    0    0           1         0         0          2         0       0      float *X = (float *)malloc(n * sizeof(float));
          .    .    .           .         .         .          .         .       .      // float **B = (float **)malloc(n * sizeof(float *));
          .    .    .           .         .         .          .         .       .      // for (i = 0; i < n; ++i) {
          .    .    .           .         .         .          .         .       .      //     B[i] = (float *)malloc(n * sizeof(float));
          .    .    .           .         .         .          .         .       .      // }
         11    1    1           1         0         0          2         0       0       float **B = (float **)mmap(NULL, n * sizeof(float *), PROT_READ | PROT_WRITE, MAP_ANONYMOUS | MAP_PRIVATE, -1, 0);
          2    0    0           1         0         0          0         0       0      if (B == MAP_FAILED) {
          .    .    .           .         .         .          .         .       .          perror("mmap");
          .    .    .           .         .         .          .         .       .          return 1;
          .    .    .           .         .         .          .         .       .      }
          .    .    .           .         .         .          .         .       .
     16,005    1    1      12,002         0         0          1         0       0      for (i = 0; i < n; ++i) {
     64,000    1    1      12,000         0         0      8,000       500     499          B[i] = (float *)mmap(NULL, n * sizeof(float), PROT_READ | PROT_WRITE, MAP_ANONYMOUS | MAP_PRIVATE, -1, 0);
     32,000    0    0      12,000         0         0          0         0       0          if (B[i] == MAP_FAILED) {
          .    .    .           .         .         .          .         .       .              perror("mmap");
          .    .    .           .         .         .          .         .       .              return 1;
          .    .    .           .         .         .          .         .       .          }
          .    .    .           .         .         .          .         .       .      }
          .    .    .           .         .         .          .         .       .
          6    1    1           3         0         0          0         0       0      if (A == NULL || X == NULL || B == NULL) {
          .    .    .           .         .         .          .         .       .          fprintf(stderr, "Memory allocation failed\n");
          .    .    .           .         .         .          .         .       .          return 1;
          .    .    .           .         .         .          .         .       .      }
          .    .    .           .         .         .          .         .       .
          .    .    .           .         .         .          .         .       .
     16,005    2    2      12,002         0         0          1         0       0      for (i = 0; i < n; i++){
     60,000    0    0       8,000         0         0      8,000       251     250           X[i] = rand() / 10000;
          .    .    .           .         .         .          .         .       .
 64,020,000    1    1  48,008,000         0         0      4,000         0       0          for (j = 0; j < n; j++)
320,000,000    0    0  64,000,000       499       492 32,000,000 1,000,000 999,979              B[i][j] = rand() / 1000;
          .    .    .           .         .         .          .         .       .
          .    .    .           .         .         .          .         .       .      }
          .    .    .           .         .         .          .         .       .
     20,001    0    0      11,999         0         0          1         0       0      for (i = 0; i < n - 1; i++) {
     35,991    1    1       7,998         0         0      3,999       250     250          S1: A[i] = 0;
 79,964,004    1    1  47,972,004         0         0      3,999         0       0          for (j = 1; j < n - 1; j++)
607,544,076    1    1 223,832,028 1,061,051 1,002,651 15,988,002         0       0              S2: A[i] += 0.33*(B[i][j] * X[j]);
          .    .    .           .         .         .          .         .       .      }
          .    .    .           .         .         .          .         .       .
          .    .    .           .         .         .          .         .       .
          1    0    0           0         0         0          0         0       0      return 0;
          4    0    0           3         0         0          0         0       0  }
--------------------------------------------------------------------------------
Ir            I1mr ILmr Dr          D1mr      DLmr      Dw         D1mw      DLmw
--------------------------------------------------------------------------------
1,071,772,128   11   11 383,888,043 1,061,550 1,003,143 48,016,014 1,001,002 1,000,978  events annotated











┏[ ajit from  MSI][ 0.164s][ RAM: 1/8GB][ Wednesday at 8:40:19 PM] [ base 3.10.13 ]
┖[~/vect_test]
└─Δ sudo valgrind --tool=cachegrind --I1=32768,512,64 --L2=32768,512,64 ./q3.out
==16204== Cachegrind, a cache and branch-prediction profiler
==16204== Copyright (C) 2002-2017, and GNU GPL'd, by Nicholas Nethercote et al.
==16204== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==16204== Command: ./q3.out
==16204==
--16204-- warning: L3 cache found, using its data for the LL simulation.
--16204-- warning: specified LL cache: line_size 64  assoc 16  total_size 12,582,912
--16204-- warning: simulated LL cache: line_size 64  assoc 24  total_size 12,582,912
==16204==
==16204== I   refs:      2,062,238,298
==16204== I1  misses:            1,009
==16204== LLi misses:            1,009
==16204== I1  miss rate:          0.00%
==16204== LLi miss rate:          0.00%
==16204==
==16204== D   refs:        832,085,800  (688,025,146 rd   + 144,060,654 wr)
==16204== D1  misses:        2,065,751  (  1,064,099 rd   +   1,001,652 wr)
==16204== LLd misses:        2,007,614  (  1,005,962 rd   +   1,001,652 wr)
==16204== D1  miss rate:           0.2% (        0.2%     +         0.7%  )
==16204== LLd miss rate:           0.2% (        0.1%     +         0.7%  )
==16204==
==16204== LL refs:           2,066,760  (  1,065,108 rd   +   1,001,652 wr)
==16204== LL misses:         2,008,623  (  1,006,971 rd   +   1,001,652 wr)
==16204== LL miss rate:            0.1% (        0.0%     +         0.7%  )
┏[ ajit from  MSI][ 10.792s][ RAM: 1/8GB][ Wednesday at 8:40:32 PM] [ base 3.10.13 ]
┖[~/vect_test]
└─Δ sudo cg_annotate cachegrind.out.16204 /home/ajit/vect_test/q3.c
--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 512-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         32768 B, 64 B, 512-way associative
Command:          ./q3.out
Data file:        cachegrind.out.16204
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:
User annotated:   /home/ajit/vect_test/q3.c
Auto-annotation:  off

--------------------------------------------------------------------------------
Ir            I1mr  ILmr  Dr          D1mr      DLmr      Dw          D1mw      DLmw
--------------------------------------------------------------------------------
2,062,238,298 1,009 1,009 688,025,146 1,064,099 1,005,962 144,060,654 1,001,652 1,001,652  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir            I1mr ILmr Dr          D1mr      DLmr      Dw         D1mw      DLmw       file:function
--------------------------------------------------------------------------------
1,071,772,128   11   11 383,888,043 1,061,550 1,003,430 48,016,014 1,001,002 1,001,002  /home/ajit/vect_test/q3.c:main
  510,062,968    3    3 128,032,000         3         3 48,012,000         0         0  /build/glibc-SzIz7B/glibc-2.31/stdlib/random_r.c:random_r
  336,084,000    2    2 128,032,000         1         1 32,008,000         1         1  /build/glibc-SzIz7B/glibc-2.31/stdlib/random.c:random
   80,020,000    1    1  16,004,000         0         0 16,004,000         0         0  /build/glibc-SzIz7B/glibc-2.31/stdlib/rand.c:rand
   32,016,227   22   22  16,008,085        10         9         15         1         1  ???:???
   32,008,000    0    0  16,004,000         1         1          0         0         0  /build/glibc-SzIz7B/glibc-2.31/stdlib/../sysdeps/unix/sysv/linux/x86/lowlevellock.h:random

--------------------------------------------------------------------------------
-- User-annotated source: /home/ajit/vect_test/q3.c
--------------------------------------------------------------------------------
Ir          I1mr ILmr Dr          D1mr      DLmr      Dw         D1mw      DLmw

          .    .    .           .         .         .          .         .         .  # include<stdlib.h>
          .    .    .           .         .         .          .         .         .  # include<stdio.h>
          .    .    .           .         .         .          .         .         .  # include<time.h>
          .    .    .           .         .         .          .         .         .  # include <sys/mman.h>
          .    .    .           .         .         .          .         .         .
          .    .    .           .         .         .          .         .         .
          5    0    0           0         0         0          2         0         0  int main(){
          1    0    0           0         0         0          1         0         0      int i, j , n = 4000;
          4    0    0           0         0         0          2         0         0      srand(time(0));
          6    1    1           1         0         0          2         1         1      float *A = (float *)malloc(n * sizeof(float));
          6    0    0           1         0         0          2         0         0      float *X = (float *)malloc(n * sizeof(float));
          .    .    .           .         .         .          .         .         .      // float **B = (float **)malloc(n * sizeof(float *));
          .    .    .           .         .         .          .         .         .      // for (i = 0; i < n; ++i) {
          .    .    .           .         .         .          .         .         .      //     B[i] = (float *)malloc(n * sizeof(float));
          .    .    .           .         .         .          .         .         .      // }
         11    1    1           1         0         0          2         0         0       float **B = (float **)mmap(NULL, n * sizeof(float *), PROT_READ | PROT_WRITE, MAP_ANONYMOUS | MAP_PRIVATE, -1, 0);
          2    0    0           1         0         0          0         0         0      if (B == MAP_FAILED) {
          .    .    .           .         .         .          .         .         .          perror("mmap");
          .    .    .           .         .         .          .         .         .          return 1;
          .    .    .           .         .         .          .         .         .      }
          .    .    .           .         .         .          .         .         .
     16,005    1    1      12,002         0         0          1         0         0      for (i = 0; i < n; ++i) {
     64,000    1    1      12,000         0         0      8,000       500       500          B[i] = (float *)mmap(NULL, n * sizeof(float), PROT_READ | PROT_WRITE, MAP_ANONYMOUS | MAP_PRIVATE, -1, 0);
     32,000    0    0      12,000         0         0          0         0         0          if (B[i] == MAP_FAILED) {
          .    .    .           .         .         .          .         .         .              perror("mmap");
          .    .    .           .         .         .          .         .         .              return 1;
          .    .    .           .         .         .          .         .         .          }
          .    .    .           .         .         .          .         .         .      }
          .    .    .           .         .         .          .         .         .
          6    1    1           3         0         0          0         0         0      if (A == NULL || X == NULL || B == NULL) {
          .    .    .           .         .         .          .         .         .          fprintf(stderr, "Memory allocation failed\n");
          .    .    .           .         .         .          .         .         .          return 1;
          .    .    .           .         .         .          .         .         .      }
          .    .    .           .         .         .          .         .         .
          .    .    .           .         .         .          .         .         .
     16,005    2    2      12,002         0         0          1         0         0      for (i = 0; i < n; i++){
     60,000    0    0       8,000         0         0      8,000       251       251           X[i] = rand() / 10000;
          .    .    .           .         .         .          .         .         .
 64,020,000    1    1  48,008,000         0         0      4,000         0         0          for (j = 0; j < n; j++)
320,000,000    0    0  64,000,000       499       499 32,000,000 1,000,000 1,000,000              B[i][j] = rand() / 1000;
          .    .    .           .         .         .          .         .         .
          .    .    .           .         .         .          .         .         .      }
          .    .    .           .         .         .          .         .         .
     20,001    0    0      11,999         0         0          1         0         0      for (i = 0; i < n - 1; i++) {
     35,991    1    1       7,998         0         0      3,999       250       250          S1: A[i] = 0;
 79,964,004    1    1  47,972,004         0         0      3,999         0         0          for (j = 1; j < n - 1; j++)
607,544,076    1    1 223,832,028 1,061,051 1,002,931 15,988,002         0         0              S2: A[i] += 0.33*(B[i][j] * X[j]);
          .    .    .           .         .         .          .         .         .      }
          .    .    .           .         .         .          .         .         .
          .    .    .           .         .         .          .         .         .
          1    0    0           0         0         0          0         0         0      return 0;
          4    0    0           3         0         0          0         0         0  }
--------------------------------------------------------------------------------
Ir            I1mr ILmr Dr          D1mr      DLmr      Dw         D1mw      DLmw
--------------------------------------------------------------------------------
1,071,772,128   11   11 383,888,043 1,061,550 1,003,430 48,016,014 1,001,002 1,001,002  events annotated

